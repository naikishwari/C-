1)multiplication function overloading
------------------------------------------------------------------------------------------
using System;
					
public class Program
{
		int a=6,b=7;
		public void mul()
					{
						Console.WriteLine("Multiplication of two number is"+(a*b));
					}
	public void mul(int a,int b)
	{
		Console.WriteLine("Multiplication is"+(a*b));
	}
	public int mul(int a,int b,int c)
	{
		return (a*b);
	}
	public void mul(string a, string b)
	{
		Console.WriteLine("multiplication"+(Convert.ToInt32(a)*(Convert.ToInt32(b))));
	}
						
	public static void Main()
	{
		Program p= new Program();
		p.mul();
		p.mul(5,4);
		Console.WriteLine(p.mul(2,3,2));
		p.mul("1","3");
		
	}
}
-----------------------------------------------------------------------------------------------
2)multiplication operator overloading
using System;
					
public class mul
{
		public int number1,number2;
		public  mul(int number1,int number2)
		{
						this.number1 =number1;
						this.number2 =number2;
		}
	public static mul operator *(mul m1,mul m2)
	{
		mul m3 = new mul(0,0);
		m3.number1 =m1.number1 + m2.number1;
		m3.number2 = m1.number2 + m2.number2;
		return m3;
	
	}
}
----------------------------------------------------------------------------------------------------------
3)
using System;
					

    public class ClassA
    {
        int n1, n2;

        public ClassA()
        {
            Console.WriteLine("I am Base class Constructor");
        }
        public ClassA(int i, int j)
        {
            n1 = i;
            n2 = j;
            Console.WriteLine("Parameterized Constructor Invoked");
            Console.WriteLine("Values are" + n1 + " and " + n2);
        }

 

        public virtual void Swap()
        {
            Console.WriteLine("Hi I am swap Function ");
        }
    }

 

    public class DerivedClass : ClassA
    {

 

        public DerivedClass() : base() { }
        public DerivedClass(int i,int j) : base(i, j) {
            base.Swap();
        }
    }
    public class Class3
    {
        public static void Main()
        {
            DerivedClass d = new DerivedClass();
            DerivedClass d2 = new DerivedClass(10, 20);
            Console.ReadLine();
        }
    }

	
	public class Program
	{
		public static void Main()
		{
			mul m1 =new mul(7,8);
			mul m2 = new mul(6,5);
			mul m3 = new mul(0,0);
			Console.WriteLine("value before mul is number1 "+m3.number1+"number 2"+m3.number2);
			m3 = m1*m2;
			Console.WriteLine("value after mul is number1 "+m3.number1+"number 2"+m3.number2);
			Console.ReadLine();
		}
						
	
}
------------------------------------------------------------------------------------------------------------
4)
using System;
					

    public class Person
    {
       public string Name;

        public Person(string name)
        {
            Name=name;
        }
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
    }

 

    public class Student : Person
    {
		public Student(string name) : base(name)
        {
            Name = name;
        }
       public void study()
	   {
	   Console.WriteLine("The student is studying");
	   }
    }
	 public class Teacher : Person
	 {
	  public Teacher(string name) : base(name)
        {
            Name=name;
        }
 
	 public void Explain()
	   {
	   Console.WriteLine("I am explaining");
	   }
	 }
	
    public class Class3
    {
        public static void Main()
        {  
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).study();
            }
        }
       }
    }
-------------------------------------------------------
5)
using System;
namespace day4
{
					
	public class shape
	{
		protected Location c;
		public string Tostring()
		{
			return string.Empty;
		}
		public double Area()
		{
			return 0.00;
		}
		public double Perimeter()
		{
			return 0.00;
		}
	}
		
public class Rectangle:shape
	{
	 double side1,side2;
	 public Rectangle(double side1,double side2)
	 {
	 this.side1=side1;
	 this.side2=side2;
	 
	 }
	 public double Area()
		{
			return side1*side2;
		}
		public double  Perimeter()
		{
			return (2*(side1+side2));
		}
	
	}

	public class Circle:shape
		{
			double radius;
			public Circle(double radius)
				 {
		 	this.radius=radius;
				 }
			public double Area()
		{
			return ((22/7)*(radius*radius));
		}
		public double Perimeter()
		{
			return (2*(22/7)*radius);
		}

		}
		public class Location
		{
			private double x,y;
		}
public class Class11
{
	public static void Main()
	{
		Rectangle r= new Rectangle(3.5,2.5);
		Console.WriteLine("Area of rectangle"+r.Area());
		Console.WriteLine("Perimeter of rectangle"+r.Perimeter());
		Circle c= new Circle(2.5);
		Console.WriteLine("Area of circle"+c.Area());
		Console.WriteLine("Perimeter of circle"+c.Perimeter());
	}
}
}


----------------------------------------------------------------------

